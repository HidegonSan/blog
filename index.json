[{"content":"みなさんはドメインを取得するのにどのレジストラを使用していますか？\n私は Gandi.net を使用する予定です。\nこのGandi.netですが、アカウントに残高を追加する方法の1つとして銀行振込があります。\n私はこの銀行振込を間違えて作成してしまいました。\n遅延の無いように振り込みください。\nこれは困りました。その作成した振り込み金額は100円です。\n100円を追加したところでドメインは購入できません。\nキャンセルボタン？削除ボタン？があったので押したのですが、反応がありません。\nほっとくわけにもいかないのでサポートに連絡しました。\nhttps://help.gandi.net/ja/contact から連絡できます。\nこういうのって英語で送ったほうが対応率高い気するので英語で送りました。\nHello Gandi. I\u0026#39;m sorry, I created a request for a bank transfer for a prepaid account by mistake. How can I cancel this? Can I just leave it alone? Or is there a way to delete/cancel it? I would like to cancel this request. 3日経った頃でしょうか、カスタマーセンターからメールが届きました。\nHello, Thank you for contacting Gandi Customer care. We have canceled the order ********* for you. You can verify in your Gandi account via menu BILLING : https://admin.gandi.net/billing We are at your service for any further question. Sincerely, \\o/ Martin G http://www.gandi.net/ どうやらキャンセルしてくれたみたいです。\nダッシュボードから確認しても履歴はありませんでした。\nこれで無事、銀行振込をキャンセルすることができました。\nやっぱりカスタマーセンターが手厚いところは印象が良いですね。\n間違えて銀行振込を作成してしまった場合は参考にしてみてください。\n最後まで読んでいただきありがとうございました。\n","permalink":"https://hidegonsan.github.io/blog/posts/gandi-cancel-transfer/","summary":"みなさんはドメインを取得するのにどのレジストラを使用していますか？ 私は Gandi.net を使用する予定です。 このGandi.netですが、アカウントに残高を","title":"Gandi.net で銀行振込をキャンセルする方法"},{"content":"この記事ではPaperModでページネーションをカスタム、数字をつける方法について解説します！\nこのブログではテーマに PaperMod を使用しています。\n説明が下手なのですが、PaperModのページネーションは 前のページ/次のページ のような形式です。\nしかし、これでは最古のページにジャンプするのができなかったり、全部で何ページあるかがわかりにくいという問題があります。\nそこで今回はPaperModのページネーションを\n| \u0026lt;\u0026lt; | \u0026lt; | 1 | 2 | 3 | 4 | 5 | \u0026gt; | \u0026gt;\u0026gt; |\nのように変更します。\n早速、Hugoのテンプレート機能を使ってPaperModのページネーション上書きしましょう！\nやり方 まずはページネーションを表示させるテンプレート本体を作っていきます。\nそのテンプレート本体をlist.htmlから呼び出してページネーション変更します。\nページネーションについて調べていたらこんなものを見つけました。\n【Hugo】ページネーションの作り方 標準で用意されている！これは実装が楽そうで良かったです。\nこの記事を参考に作成します。\nHugoのテンプレート機能を使ってページネーションを変更しましょう。\nテンプレートを作成する ページネーションのテンプレート layouts/partials/pagination.html を作成します。\nそして次のコードをコピーして貼り付けてください。\n1 2 3 4 {{/* Thanks: https://joni.jp/pg/hugo-pagination/ */}} \u0026lt;nav\u0026gt; {{ template \u0026#34;_internal/pagination.html\u0026#34; . }} \u0026lt;/nav\u0026gt; このコードはHugoの内部テンプレートを呼び出しています。\n元コードではナビゲーションタグで囲まれていなかったのですが、ナビゲーションリンク貼ってるんで適切でしょう。( 参考 )\nついでに内部テンプレートがどこにあるのか気になったのでソースを見ました。\n(Hugo)/tpl/tplimpl/embedded/templates/pagination.html が実装っぽかったです。ちゃんと調べてないのでわかりませんが。\nとりあえず、これで関連記事のテンプレートは作成できました。\n次はこのページネーションのテンプレートを呼び出していきましょう。\nテンプレートの呼び出し themes/PaperMod/layouts/_default/list.html を layouts/_default/list.html にコピーしてください。\nコピーしたら88行目に\n88 \u0026lt;footer class=\u0026#34;page-footer\u0026#34;\u0026gt; と書かれていると思います。\nこの下にテンプレートを呼び出すコードを書いていきます。\nまず、PaperMod標準のページネーションを無効にしましょう。\n89行目から106行目までをコメントアウトするか削除してください。\nこれは知らなかったのですが、Hugoではコメントアウトする際、\n\u0026lt;!-- Comment --\u0026gt; のようにするのではなく、\n{{/* Comment */}} とするらしいです。\nここらへんの仕様はあんまよくわかってないのでいつか勉強したいです。\n気を取り直して、呼び出す処理を書いていきましょう。\nコメントアウトするのは\n89 \u0026lt;nav class=\u0026#34;pagination\u0026#34;\u0026gt; から\n106 \u0026lt;/nav\u0026gt; までです。\n無効化が完了したら、次のコードをコピーして コメントアウト/削除 した行の下に貼り付けてください。\n1 2 {{/* Thanks: https://joni.jp/pg/hugo-pagination/ */}} {{- partial \u0026#34;pagination.html\u0026#34; . -}} これでテンプレートを呼び出すコードは終わりです。\nCSSを適用する これだけでも一応は機能しますが、見た目が最悪なのでCSSを書いていきます。\nassets/css/extended/custom.css を作成してください。\nここに作成したCSSは1つのファイルにまとめられます。( 詳細 )\n次のコードをコピーして貼り付けてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /* ページネーションを書き換える PaperModのページネーションがベース */ /* ul */ .pagination-default { margin: 0; padding: 0; list-style: none; } /* li */ .pagination-default \u0026gt; .page-item { display: inline-block; width: 100%; text-align: center; } /* テキスト */ .pagination-default \u0026gt; .page-item a { display: block; color: var(--theme); font-size: 16px; line-height: 36px; background: var(--primary); border-radius: calc(36px / 2); padding: 0; margin-left: 5%; width: 90%; } /* 現在のページ */ .pagination-default \u0026gt; .active \u0026gt; a { background: var(--secondary); } /* ホバー */ .pagination-default \u0026gt; li:not(.active) \u0026gt; a:hover { background: var(--content); } これでCSSは終了です。\nPaperModのCSSを参考に作成しました。\nPaperModのCSSは themes/PaperMod/assets/css/common/main.css にあります。\n現在のページの強調やホバー時に背景が変わるようにしました。\nコレ、結構気に入ってます (笑)\nCSSで疑似クラスやセレクタをまじめに使用したことがなかったのですが、かなり融通が効きますね。\nHTML5 + CSS3 はチューリング完全だとか聞いたことがありますが納得です。\nこのブログでも使用しているのでいつか確認してみてください。\nその\u0026hellip;記事が増えないと表示されないので\u0026hellip;\n完成 完成すると次のように表示されていると思います。\n十分な記事数がないと表示されないので注意してください。\n(これは少しカスタムしてあるのでちょっとだけ見た目が違うかもしれません)\n以上で終わりです！お疲れ様でした！\nおわりに 今回はHugoのテンプレート機能を使ってPaperModのページネーションをカスタムしてみました。\nその他にもテンプレート機能を使うことでさまざまなことができます。\nこのブログでは以前に PaperModで関連コンテンツを表示する方法！ という記事も投稿しているのでこちらもぜひご覧ください！\n最後まで読んでいただきありがとうございました。\n","permalink":"https://hidegonsan.github.io/blog/posts/papermod-custom-pagination/","summary":"この記事ではPaperModでページネーションをカスタム、数字をつける方法について解説します！ このブログではテーマに PaperMod を使用しています。 説明","title":"PaperModでページネーションをカスタムする方法！"},{"content":"あまりに3DSのプラグイン事情がややこしかったので、自分で理解するためにも一度整理しました。\n間違っているかもしれません。\n間違えていた場合、連絡してくださると幸いです。\n拡張子 3gx 3ds Game eXtension の略です。\nLuma3DS 3GX Loader を通して実行します。\n配置場所は /luma/plugins/[TID]/plugin.3gx か /luma/plugins/default.3gx です。\n最終的には3gxtoolを通して読み込める形式に変換されます。\n3GX自体のバージョンとして v1 と v2 があります。\nこのバージョン自体が意識されることはほとんどありません。\nLuma 3DS 3GX Loader を通して実行します。\n一度に使用できるプラグインは1つまでです。\nplg plugin の略です。 NTR CFW (BootNTR Selector) を通して実行します。\n配置場所は /plugin/[TID]/plugin.plg です。\n最新のバージョンでは Luma3DS 3GX Loader と共存できます。\nプラグインによっては一度に複数のプラグインを使用できます。\n現在ではほとんど使用されません。\nプラグインの種類 XY式 拡張子は .plg です。\n一度に複数読み込めるかは忘れました。\nSELECT式と併用はできたような気がします。\nX と Y を同時に押すことでメニューが開きます。\nSpeedflyのプラグインがこの形式です。 現在ではほとんど使用されません。\n別名 v1 とも呼ばれます。\nSELECT式 拡張子は .plg です。\nSELECT式プラグインは一度に複数読み込むことができます。\n記憶が曖昧ですが、3, 4つは同時に読み込めた気がします。 SELECTを押すことでメニューが開きます。\nCTRPFが出る前は一番使われていた形式です。\n現在ではほとんど使用されません。\n別名 v2 とも呼ばれます。\nCTRPF 先に言っておくと、これが一番ややこしいです。 ややこしすぎたので早見表を作りました。\n3GX v1 v2 v2 Luma v9.1 v10.1.3 ~ v12.0 v10.1.3 ~ v12.0 libctrpf v0.5.1 v0.6.0 ~ v0.7.3 v0.7.4 ~ 3gxtool v0 v1.0 v1.1 (この表は3gx限定で、plg形式のCTRPFは考慮されていません)\nNanquitasが作成したプラグインを作成するためのフレームワークです。\n現在はPabloMK7がメンテナンスしています。\nまた、それを使用して作成されたプラグインの総称でもあります。\n拡張子は .plg と .3gx の2つがあります。\nCTRPFの中でも大きく分けて2種類あります。\nplg世代 その他の .plg 形式のプラグインと同じようにNTRを通して読み込みます。\n追記: みなとさんより情報をいただきました！\nLuma 3GX Loader 以前に Luma Plugin Loader が存在していた\nLuma Plugin Loader の最初期は .3gx ではなく .plg を読み込んでいた\n読み込めるのはLoaderに対応しているCTRPFだけ\nLumaから読み込む .plg 形式のCTRPFもあったようです！👀\n配置場所は /plugin/[TID]/plugin.plg です。\n多分SELECT式と併用できた気がします。\nただし、CTRPFとは併用できなかった気がします。\n記憶が曖昧なので当てにしないでください。\nplg世代の途中までフリチ (FreeCheat) が搭載されいて、途中から ActionReplay に変わった記憶があります。\n現在ではほとんど使用されません。\n3gx世代 3gx世代でも、大きく分けると2つあります。\n違いはLuma 3GX Loaderのバージョンです。\n3GX v1 使用するLuma 3GX Loaderのバージョンは v9.1 です。\n出回っているほとんどのプラグインがこの 3GX v1 です。\nこう聞くとわかりにくいのですが、CTRPFのバージョンが v0.5.1 のプラグインです。\n3GXバージョンは v1 で、シンボル情報保存などの仕様がありません。\n作成するのに使用する3gxtoolのバージョンはありません。\nバージョンがないだけで、存在はします。\n0.5.1用の3gxtoolバージョンを僕は勝手に v0 と呼んでいます。\n目にする範囲では \u0026ldquo;0.5.1用 3gxtool\u0026rdquo; などと呼ばれています。\n3GX v2 使用するLuma 3GX Loaderのバージョンは v10.1.3 ~ v12.0 です。\n3GX v2に移行すると同時に、CTRPF v0.6.0 がリリースされました。\n3GX v2に対応するlibctrpfバージョンは v0.6.0 ~ です。\n3GX v2の中で覚えておきたいのが3gxtool事件 (勝手にそう呼んでる) です。\n3GX v2移行初期ではバージョンなしの3GX v2用3gxtoolが使用されていました。\nこの3gxtoolでは、プラグインが1MiBを超えるとビルドができないようになっていました。\nVapecordの作者でもあるLukasが3gxtoolをリバースエンジニアリングしてこの制限を解除したものを配布しました。\nこの事件で3GX v2の3gxtool事情が一時期カオスなことになっていました。\nこれは、libctrpf v0.7.3リリース、CTRPFがOSS化された時に3gxtool v1.0が公開されて解決しました。\nlibctrpf v0.6.0 ~ v0.7.3\n3GXバージョンはv2で、3gxtoolのバージョンが途中 (libctrpf v0.7.3 のリリースと同時) から v1.0 になりました。\nすべて割と最近リリースされました。\n音声再生、不具合の修正、ディレクトリ構造の変更 などさまざまな更新がありました。\nlibctrpf v0.7.4 ~\nCitra 上で3GX Loaderを使用できるようになりました。\n3GXバージョンは変わらずv2で、3gxtoolのバージョンがv1.1になりました。\n2023年 2月 23日 の時点ではこの libctrpf v0.7.4 が最新です。\nこのバージョンのリリース後にlibctrpfがパッケージマネージャで管理されるようになりました。\n結局何を使えばいいのか 推奨構成:\nLuma 3GX Loader v12.0 3gxtool v1.1 libctrpf v0.7.4 この構成で作成すれば大丈夫です。\nただし、一部のゲームではアドレスが変わるため、v0.5.1がいまだに使用されています。\nv0.5.1のビルドはさまざまな汚い技 (devkitARMのダウングレード) などが強制されるため、推奨しません。\nどうしても v0.5.1 をビルドしたい人は自分で頑張るしかないです。\nこれらのバージョンの移行は非常に面倒なので慎重に考えたほうがいいです。\n上の推奨構成を使用することを強くオススメします。\nよくある間違い 正しい情報: CTRPF と 3gx は違う CTRPFは3gx の一種です。 3gxは3DSのゲームを拡張するためのものです。\nCTRPFは3gxをより扱いやすくするためのフレームワークです。 しかし、CTRPFを使用せずに3gxが作成されることはほとんどありません。\n実際に、出回っている3gxのほとんどがCTRPFを使用して作成されています。\nそこまで気にする必要はありませんが、同じものではありません。\nおわりに 以上、ややこしすぎる3DSプラグイン事情でした。\n実際にはもっと細かいと思います。\n","permalink":"https://hidegonsan.github.io/blog/posts/3ds-plugin-version/","summary":"あまりに3DSのプラグイン事情がややこしかったので、自分で理解するためにも一度整理しました。 間違っているかもしれません。 間違えていた場合、連","title":"複雑な3DSのプラグイン事情"},{"content":"こんにちは！皆さんは普段GitHubを利用していますか？\n僕はこのブログを書いたり、新しいプロジェクトを探すために毎日利用しています！\nそんなGitHubですが、使っていくうちに不便だと感じるところが出てきませんか？\n今回紹介する \u0026ldquo;Refined GitHub\u0026rdquo; は、そんなちょっとした不便を解消してくれる拡張機能となっています！\nこの拡張機能、なんと 2023年 2月 21日 時点で209個もの機能が実装されているんです！\nぜひこの記事を読んでインストールしてみてください！\nインストール方法 Refined GitHubは Chrome, Firefox, Safari に対応しています。\nブラウザにRefined GitHubをインストールするには、各ブラウザのストアから入手する必要があります。\nChrome Chrome用インストールリンク をクリックしてください。\n次に、 \u0026ldquo;Chrome に追加\u0026rdquo; と書かれた青いボタンを押してください。\nすると\n次の権限にアクセス可能:\napi.github.com、gist.github.com、github.com 上にある自分のデータの読み取りと変更\nと出てきます。\nこれは拡張機能を動作させるために必要な権限なので心配する必要はないです。\n\u0026ldquo;拡張機能を追加\u0026rdquo; と書かれたボタンを押してください。\n拡張機能が追加されると拡張機能の紹介ページが開きます。\nこの後説明する \u0026ldquo;APIベースの機能の有効化\u0026rdquo; への設定リンクが書かれているため、そちらを利用する人はそのままにしておいてください。\n閉じてしまっても拡張機能の設定ページから開くことができるので大丈夫です。\nFirefox Firefox用インストールリンク をクリックしてください。\n次に、 \u0026ldquo;Firefox へ追加\u0026rdquo; と書かれた青いボタンを押してください。\nすると\nRefined GitHub を追加しますか？ この拡張機能は以下の権限が必要です:\n・github.com の保存されたデータへのアクセス\n・api.github.com の保存されたデータへのアクセス\n・gist.github.com の保存されたデータへのアクセス\nと出てきます。\nこれは拡張機能を動作させるために必要な権限なので心配する必要はないです。\n\u0026ldquo;追加(A)\u0026rdquo; と書かれたボタンを押してください。\n拡張機能が追加されると拡張機能の紹介ページが開きます。\nこの後説明する \u0026ldquo;APIベースの機能の有効化\u0026rdquo; への設定リンクが書かれているため、そちらを利用する人はそのままにしておいてください。\n閉じてしまっても拡張機能の設定ページから開くことができるので大丈夫です。\nSafari Safari用インストールリンク Safari は僕がApple製品を所持していないためわかりません。ごめんなさい。\nAPIベースの機能の有効化 これだけでもRefined GitHubは動作します。\nしかし、完全に動作させるためには個人用アクセストークンの追加が必要です。\n個人用アクセストークンを追加すると次の機能が使えるようになります。\n公開リポジトリを編集できる (public_repo 権限) プライベートリポジトリも編集できる (repo 権限) クイックレポ削除が使える (delete_repo 権限) 個人用アクセストークンの追加方法 ここからはChromiumでの画像を載せていきます。Firefoxでも大体同じです\n拡張機能インストール後に表示された紹介ページでオクトキャットの下の\nCreate and add a Personal Access Token in the extension’s options to ensure every feature works correctly.\nの extension’s options がクリックできるのでクリックしてください。\n閉じてしまった人は\nChrome: 右上3点マーク \u0026gt; その他のツール \u0026gt; 拡張機能 \u0026gt; Refined GitHub 詳細 \u0026gt; 拡張機能のオプション\nFirefox: 右上3本線 \u0026gt; アドオンとテーマ \u0026gt; 拡張機能 \u0026gt; Refined GitHub \u0026gt; 設定\nで開けます\nすると拡張機能の設定ページが開きます。\nそこで 🔑 Personal token (optional, generate one) と書かれているところがあります。\ngenerate one がクリックできるのでクリックしてください。\nクリックすると、GitHubに飛び、パスワードを求められます。\nパスワードを入力すると個人用アクセストークンの生成ページが表示されます。\n(旧式のアクセストークンだと気づいた人もいると思います。そのうち Refined GitHub で更新がされると思います。)\n設定は基本そのままで大丈夫ですが、Expirationが30日に設定されているため30日で有効期限が切れてしまいます。\n無期限に設定することもできますが、その場合はセキュリティとトレードオフです。\n自分で好きな期限を設定してください。\n下の方に緑色で Generate token とあります。クリックしましょう。\nクリックするとページが移動します。\nページが移動したら、個人用アクセストークンが表示されているのでコピーします。\n1度しか表示されないのでコピーし忘れないように注意してください。\n(ちなみにこのトークンは無効です。)\nコピーしたらさっきの拡張機能の設定ページに戻ります。\nそして 🔑 Personal token (optional, generate one) の下のテキストボックスに貼り付けます。\nトークンが有効だった場合、その下のテキストが\n☑ The token enables some features to read data from public repositories\n☑ The public_repo scope lets them edit your public repositories\n☑ The repo scope lets them edit private repositories as well\n☑ The delete_repo scope is only used by the quick-repo-deletion feature\nとなります。\nチェックマークが出れば個人用アクセストークンの認証は完了です。\n機能 正直多すぎて紹介しきれません。\n代表的な機能は\n空白文字が見えるようになる 1クリックのコンフリクト修正プログラムの追加 コメントにリアクションした人のアイコンを表示 IssueやPRなどを除くすべてのイベントを非表示にできる コードや会話のタイトルでIssueやPRの参照元やURLをリンクさせる PRのマージ時にチェックを待つオプションの追加 PR内の全ファイルの変更を元に戻すボタンを追加 タイプとステータスで通知を選択できる があります。\nこの拡張機能をインストールした時点で気づいた人もいると思いますが、GitHub内のさまざまなUIが変更されています。\nこの拡張機能は \u0026ldquo;シンプルさ\u0026rdquo; を目的にしているので細かい設定等は必要ありません。\nすべての機能を確認したい人はRefined GitHubのREADMEを確認してみてください。\nおわりに 今回はGitHubの機能を強化する拡張機能 \u0026lsquo;Refined GitHub\u0026rsquo; を紹介しました。\nRefined GitHubから本家に輸入されているデザインもあるそうです。\n今後の動向が見逃せない拡張機能ですね！\n最後まで読んでいただきありがとうございました。\n","permalink":"https://hidegonsan.github.io/blog/posts/refined-github/","summary":"こんにちは！皆さんは普段GitHubを利用していますか？ 僕はこのブログを書いたり、新しいプロジェクトを探すために毎日利用しています！ そんなG","title":"GitHubを強化する拡張機能 'Refined GitHub' のご紹介！"},{"content":"この記事ではPaperModで関連コンテンツを表示する方法について解説します！\nこのブログではテーマに PaperMod を使用しています。\nしかし、PaperModでは関連記事を表示することができません。\nそこで今回はHugoのテンプレート機能を使って関連記事を表示させてみました！\nやり方 まずは関連記事を表示させるテンプレート本体を作っていきます。\nそのテンプレート本体をシングルページから呼び出して関連記事を表示します。\nPaperModに用意されていないかと調べていたらこんなものを見つけました。\nShow related posts | GitHub.com しかしこのプルリクエストは作成から4か月経った今でもマージされていません。\n仕方ないのでHugoのテンプレート機能を使ってこの機能を取り入れましょう。\nテンプレートを作成する 関連記事のテンプレート layouts/partials/related.html を作成します。\nそして次のコードをコピーして貼り付けてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 {{/* Show related posts | Thanks: https://github.com/adityatelange/hugo-PaperMod/pull/1049 */}} {{ $related := first 4 (where (where .Site.Pages \u0026#34;.Params.tags\u0026#34; \u0026#34;intersect\u0026#34; .Params.tags) \u0026#34;Permalink\u0026#34; \u0026#34;!=\u0026#34; .Permalink) }} {{ with $related }} \u0026lt;div class=\u0026#34;related\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;see-also\u0026#34;\u0026gt;関連記事\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range . }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {{ end }} コードの内容についてはいつか追記したいと思います。\nとりあえず、これで関連記事のテンプレートは作成できました。\n次はこの関連記事のテンプレートを呼び出していきましょう。\nテンプレートの呼び出し themes/PaperMod/layouts/_default/single.html を layouts/_default/single.html にコピーしてください。\nコピーしたら38行目に\n38 \u0026lt;footer class=\u0026#34;post-footer\u0026#34;\u0026gt; と書かれていると思います。\nこの下にテンプレートを呼び出すコードを書いていきます。\n次のコードをコピーして38行目の下に貼り付けてください。\n1 2 3 4 {{/* Show related posts | Thanks: https://github.com/adityatelange/hugo-PaperMod/pull/1049 */}} {{- if (.Param \u0026#34;ShowRelatedContent\u0026#34;) }} {{- partial \u0026#34;related.html\u0026#34; . }} {{- end }} これでテンプレートを呼び出すコードは終わりです。\n関連記事の表示を有効にする config.yml や hugo.yml などの設定ファイルに次のコードを貼り付けてください。 自分の設定ファイルのフォーマットと同じ構成で書いてください。\nYAML:\n1 2 params: ShowRelatedContent: true TOML:\n1 2 [params] ShowRelatedContent = true JSON:\n1 2 3 4 5 { \u0026#34;params\u0026#34;: { \u0026#34;ShowRelatedContent\u0026#34;: true } } CSSを適用する これだけでも一応は機能しますが、見た目が最悪なのでCSSを書いていきます。\nオリジナルのプルリクエストにもCSSがありましたが、あまり好みではなかったため書き直しています。\nassets/css/extended/custom.css を作成してください。\nここに作成したCSSは1つのファイルにまとめられます。( 詳細 )\n次のコードをコピーして貼り付けてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /* 関連記事 親要素 */ .post-footer .related { margin: 0; padding: 0; } /* \u0026#34;関連記事\u0026#34; */ .post-footer h3 { margin: 1.5em 0 0.8em 0; } /* リスト 親要素 */ .post-footer .related ul { margin: 0; padding: 0; list-style: none; } /* リスト アイテム */ .post-footer .related li { display: inline-block; margin-inline-end: 6px; margin-bottom: 6px; } /* リスト アイテム リンク */ .post-footer .related a { border-radius: var(--radius); background: var(--code-bg); border: 1px solid var(--border); display: block; padding: 8px 10px 8px 10px; color: var(--secondary); font-size: 15px; line-height: 34px; background: var(--code-bg); } /* リスト アイテム リンク ホバー */ .post-footer .related a:hover { background: var(--border); } /* 次/前のページとタグとの間をあける*/ .paginav { margin-top: 1.5em; } これでCSSは終了です。\nですが、もうひと工夫を加えてより美しくしてみましょう。\n次のコードを追加してください。\n1 2 3 4 5 /* 記事とフッタの間に線を入れる */ .post-footer { border-top: 1px solid; border-image: linear-gradient(90deg, var(--code-bg), var(--primary), var(--code-bg)) 1; } こうすることで記事本体とフッターの間にいい感じの線を入れられます。\nこのブログでも使用しているので後で確認してみてください。\n完成 完成すると次のように表示されていると思います。\n関連記事がないと表示されないので注意してください。\nまた、関連記事は4つまで表示されます。\nお疲れ様でした！\nおわりに 今回はHugoのテンプレート機能を使ってPaperModで関連記事を表示させてみました。\nその他にもテンプレート機能を使うことでさまざまなことができます。\nこのブログでは PaperModでページネーションをカスタムする方法！ という記事も投稿しているのでこちらもぜひご覧ください！\n最後まで読んでいただきありがとうございました。\n","permalink":"https://hidegonsan.github.io/blog/posts/papermod-related/","summary":"この記事ではPaperModで関連コンテンツを表示する方法について解説します！ このブログではテーマに PaperMod を使用しています。 しかし、PaperM","title":"PaperModで関連コンテンツを表示する方法！"},{"content":"Hugoとは Hugoは静的サイトジェネレーターで、高速で簡単にサイトを作成できます。\n公式サイト にはこう書かれています。\n\u0026ldquo;ウェブサイトを構築するための世界最速のフレームワーク\u0026rdquo;\n実際、ブログをビルドしてみたのですが、0.1秒もかかりませんでした。(ページが少ないのもあるけど)\nHugoはGoで作成されているらしいです。( GitHub 組織ページ )\n多くののプラットフォームに対応しており、 リリースページ を見ると\nmacOS DragonFly BSD FreeBSD NetBSD OpenBSD Windows (amd64, arm64) 各種Linuxディストロ (パッケージマネージャ) に対応していました。 しかもシングルバイナリらしいです。バイナリサイズは60MB程度でした。\n僕はpacmanを使用してインストールしましたが、Windowsを使ってる人にはありがたいと思います。\nさらにGitHub Actionsも用意されていてプッシュするたびにビルド \u0026amp; デプロイができます。\nこのブログでもGitHub Actionsを使用してビルドを自動化しています！\nHugoの高速なビルドのおかげか、2000分の上限に届く気配がしません笑\n実際に作成してみる とりあえず クイックスタート を読んで進めました。\nテーマは PaperMod を使用しました。\n選んだ理由は\n更新されている Starが多い レスポンシブ ダークテーマ対応 軽い が大きな理由です。個人的に更新が続いていることはマストです。\nもう1つ別のテーマの Stack とも迷ったんですが、公式のデモページ同士で速度測定をしたところ、Stackが大幅に負けていたのでやめました。\nPaperModはオススメのテーマですが、いくつか気に入らないところがありました。\nページネーションが 前/次 しかない 関連記事を表示できない 目次が固定されない 全部Hugoの機能であるテーマのオーバーライドで解決しました。\nこれについても別の記事で書きたいと思います。\n関連記事の表示方法を解説しました！\nPaperModで関連コンテンツを表示する方法！ PaperModでページネーションをカスタムする方法！ もぜひ確認してください！\n詳しい作り方は他のサイトが解説してくれているのでここでは書きません。\n\u0026hellip;が、いくつかコケた \u0026amp; 更新されていた 点があるのでそれも書きます。\n注意点 設定ファイルは config.* から hugo.* になった ココ です。ほぼ最新の更新です。ほとんどのサイトが古い情報なので注意が必要です。\n古いファイル名でも読みにいくらしいですが変更しておいた方が良さそうです。\nサブディレクトリで運用する場合 canonifyUrls を true にする必要があるそうです。\nbaseUrl とかそのへんでコケまくったのでこれもまた別記事で書きたいと思います。\nその他 注意点ではないですが、YAMLをはじめて読んだのでちょっと困りました。\nもうちょっと明示的に書きたいです。\nその点ではJSON大好きなんですが、コメントとケツカンマができないので\u0026hellip;\nそれさえ解消されればJSONは最強だと思います。\nおわりに 今回はHugoを使用してブログを作ってみました。\nこの記事を書いていて思ったのですが、ブログを書くのって思った以上に大変でした。\nHugoを設定するのは苦でなかったのですが、実際に記事を書くのが予想以上に面倒です。\n文章を書く練習にもなるのでなるべく続けていきたいのですが\u0026hellip;\n頑張って更新を続けられたらと思います。\n最後まで読んでいただきありがとうございました。\n","permalink":"https://hidegonsan.github.io/blog/posts/blog-with-hugo/","summary":"Hugoとは Hugoは静的サイトジェネレーターで、高速で簡単にサイトを作成できます。 公式サイト にはこう書かれています。 \u0026ldquo;ウェブサ","title":"Hugoでブログを作った！"}]